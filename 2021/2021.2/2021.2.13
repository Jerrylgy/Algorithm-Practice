'''给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。

请你将两个数相加，并以相同形式返回一个表示和的链表。

你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807.
'''
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self,l1:ListNode,l2:ListNode) -> ListNode:
        #将l1变成整数
        nums1=str(l1.val)
        while l1.next:
            nums1+=str(l1.next.val)
            l1=l1.next
        nums1=nums1[::-1]
        nums1n=int(nums1)
        
        nums2=str(l2.val)
        while l2.next:
            nums2+=str(l2.next.val)
            l2=l2.next
        nums2=nums2[::-1]
        nums2n=int(nums2)

        numsresult=str(nums1n+nums2n)        
        result=ListNode(int(numsresult[0]))
        for i in range(1,len(numsresult)):
            result=ListNode(int(numsresult[i]),result)
        return result
#将两个数转化为整数然后相加再转换为列表。最直接的思路。要注意这一对链表操作的一些方法
